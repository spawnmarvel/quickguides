import requests
import base64
import json
import logging


import requests
import json
import random

logging.basicConfig(filename="log.log", filemode="a", format="%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s",
                    datefmt="%Y-%m-%d %H:%M:%S", level=logging.DEBUG)


class ApiWorker():

    def __init__(self):
        self.urlpost = None
        self.urlpage = None
        self.user = None
        self.cred = None
        self.read_vault()

    def read_vault(self):
        try:
            with open("keyvault.json") as fi:
                data_tmp = json.load(fi)
                data = data_tmp["keyvault"]
                rv = data[0]
                self.urlpost = rv["urlpost"]
                self.urlpage = rv["urlpage"]
                self.user = rv["user"]
                self.cred = rv["cred"]
        except FileNotFoundError as ex:
            logging.info(ex)

    def make_post_and_send(self):
        data = {
            "title": "Title for Post 2",
            "content": "This is the content of my new post.\nThis is a new line\n This is a link https://follow-e-lo.com/\n\n Produced by: " + str(self.user) + "",
            "status": "publish"  # Use "draft" to save the post as a draft

        }
        try:
            # Send the HTTP request
            response = requests.post(self.urlpost, auth=(
                self.user, self.cred), json=data)
            # Check the response
            if response.status_code == 201:
                logging.info("Post created successfully")
            else:
                logging.error("Failed to create post: " + response.text)
        except Exception as ex:
            logging.error(ex)

    def make_post_and_send_html(self):
        content = '<p>This is the content of my new post, is is autogenerated with python.</p>' \
                  '<br>This is a new line for some text</p>' \
                  '<br><p><a href=\"https://www.google.com\" target="_blank"> Here is a link to Google</a></p>' \
                  '<p>Soda:</p>' \
                  '<ul>' \
            '<li><p><a href=\"https://www.google.com\" target="_blank">Imsdal</a></p></li>' \
            '<li><p><a href=\"https://www.google.com\" target="_blank">Solo</a></p></li>' \
            '<li><p><a href=\"https://www.google.com\" target="_blank">Sprite</a></p></li>' \
                  '</ul>' \
                  '<br><p>Produced by: ' + str(self.user)
        data = {
            "title": "Title for Post 4",
            "content": content,
            "tags": 1,  # the id of the tag
            "status": "publish"  # Use "draft" to save the post as a draft

        }
        try:
            # Send the HTTP request
            response = requests.post(self.urlpost, auth=(
                self.user, self.cred), json=data)
            # Check the response
            if response.status_code == 201:
                logging.info("Post created successfully")
            else:
                logging.error("Failed to create post: " + response.text)
        except Exception as ex:
            logging.error(ex)


    def get_all_categories(self):
        dict_of_categories = {}
        try:
            response = requests.get("https://mellowthinking.com//wp-json/wp/v2/categories", auth=(self.user, self.cred))
            tmp_li = response.json()
            print(tmp_li[0])
            for t in tmp_li:
                print(t["id"], t["name"])
                dict_of_categories[t["name"]] = t["id"]
            print(dict_of_categories)
            return dict_of_categories
        except Exception as ex:
            logging.error(ex)


    def get_all_posts(self):
        dict_of_categories = {}
        try:
            # get last page post in category customer
            # response = requests.get("https://mellowthinking.com/wp-json/wp/v2/posts?categories=21", auth=(self.user, self.cred))

            # get last 10 posts default
            response = requests.get("https://mellowthinking.com/wp-json/wp/v2/posts", auth=(self.user, self.cred))

            # get max posts 100
            # response = requests.get("https://mellowthinking.com/wp-json/wp/v2/posts?per_page=100", auth=(self.user, self.cred))

            # get max posts 100 in category customer
            # response = requests.get("https://mellowthinking.com/wp-json/wp/v2/posts?per_page=100&categories=21", auth=(self.user, self.cred))

            # get posts 10 in category customer
            response = requests.get("https://mellowthinking.com/wp-json/wp/v2/posts?per_page=10&categories=21", auth=(self.user, self.cred))
            tmp_li = response.json()
            print(tmp_li)
            # we get default 10
            print(str(len(tmp_li)))
            dict_of_post = {}
            for t in tmp_li:
                post_id = t["id"]
                post_title = t["title"]["rendered"]
                print(post_id, post_title)
                if post_title.lower() == "aa wind 53246":
                    print("we already have:", post_title)

        except Exception as ex:
            logging.error(ex)

    def read_template_make_post_html_customer(self):
        data_template = None
        category = self.get_all_categories()
        customer_id = category["Customers"]
        try:
            with open("templatepostcustomer.html", "r") as fi:
                lines = fi.read().replace('\n', '')
                data_template = lines
            names = ["AA Oil", "AA Wind", "AA Mifflin"] # "RDoxxon", "RDRINCO", "Runder Mifflin", "Rupiter Mining Corporation", "Ragruato", "Rrmacham", "Rnitech" , "Rontoso", "Retacortex", "Rekall"]
            for n in names:
                print(n)
                data = {
                "title": n,
                "content": data_template,
                "tags": 1,  # the id of the tag
                "categories": customer_id,
                "status": "publish"  # Use "draft" to save the post as a draft
                 }
                # Send the HTTP request
                response = requests.post(self.urlpost, auth=(self.user, self.cred), json=data)
                # Check the response
                if response.status_code == 201:
                    logging.info("Post created successfully")
                else:
                    logging.error("Failed to create post: " + response.text)
        except Exception as ex:
            logging.error(ex)

    def make_post_html_customer_header(self):
        data_template = None
        category = self.get_all_categories()
        customer_id = category["Customers"]
        try:
            names = ["AA Oil 53245", "AA Wind 53246", "AA Mifflin 53247"] # "RDoxxon", "RDRINCO", "Runder Mifflin", "Rupiter Mining Corporation", "Ragruato", "Rrmacham", "Rnitech" , "Rontoso", "Retacortex", "Rekall"]
            for n in names:
                print(n)
                data = {
                "title": n,
                "content": "This was autogenerated. Please add some content, your new customer is ready",
                "tags": 1,  # the id of the tag
                "categories": customer_id,
                "status": "publish"  # Use "draft" to save the post as a draft
                 }
                # Send the HTTP request
                response = requests.post(self.urlpost, auth=(self.user, self.cred), json=data)
                # Check the response
                if response.status_code == 201:
                    logging.info("Post created successfully")
                else:
                    logging.error("Failed to create post: " + response.text)
        except Exception as ex:
            logging.error(ex)


    def read_template_make_post_html_product(self):
        data_template = None
        category = self.get_all_categories()
        products_id = category["Products"]
        try:
            with open("templatepostproduct.html", "r") as fi:
                lines = fi.read().replace('\n', '')
                data_template = lines
            names = ["700Xa", "750Xa"]
            for n in names:
                print(n)
                data = {
                "title": n,
                "content": data_template,
                "tags": 1,  # the id of the tag
                "categories": products_id,
                "status": "publish"  # Use "draft" to save the post as a draft
                 }
                # Send the HTTP request
                response = requests.post(self.urlpost, auth=(self.user, self.cred), json=data)
                # Check the response
                if response.status_code == 201:
                    logging.info("Post created successfully")
                else:
                    logging.error("Failed to create post: " + response.text)
        except Exception as ex:
            logging.error(ex)

    def read_template_make_post_html_project(self):
        data_template = None
        category = self.get_all_categories()
        products_id = category["Projects"]
        li = []
        for x in range(0,200):
            ran = random.randint(9000,9999)
            li.append(str(ran))
        try:
            with open("templatepostproject.html", "r") as fi:
                lines = fi.read().replace('\n', '')
                data_template = lines
            
            for l in li:
                # print(l)
                name = l + " Project"
                data = {
                "title": name,
                "content": data_template,
                "tags": 1,  # the id of the tag
                "categories": products_id,
                "status": "publish"  # Use "draft" to save the post as a draft
                 }
                # Send the HTTP request
                response = requests.post(self.urlpost, auth=(self.user, self.cred), json=data)
                # Check the response
                if response.status_code == 201:
                    logging.info("Post created successfully")
                else:
                    logging.error("Failed to create post: " + response.text)
        except Exception as ex:
            logging.error(ex)

    def make_page_and_send(self):
        data = {
            "title": "Houston Inc",
            "content": "This is the content of my new post.\nThis is a new line\n This is a link https://follow-e-lo.com/\n\n Produced by: " + str(self.user) + "",
            "status": "publish",  # Use "draft" to save the post as a draft
            "category": "Customers"

        }
        try:
            # Send the HTTP request
            response = requests.post(self.urlpage, auth=(
                self.user, self.cred), json=data)
            # Check the response
            if response.status_code == 201:
                logging.info("Page created successfully")
            else:
                logging.error("Failed to create page: " + response.text)
        except Exception as ex:
            logging.error(ex)


if __name__ == "__main__":
    worker = ApiWorker()
    # worker.make_post_and_send()
    # worker.make_post_and_send_html()
    # worker.make_page_and_send()
    worker.get_all_categories()
    # worker.read_template_make_post_html_customer()
    # worker.read_template_make_post_html_product()
    # worker.read_template_make_post_html_project()
    # worker.make_post_html_customer_header()
    worker.get_all_posts()
   
