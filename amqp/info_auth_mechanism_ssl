* Client Certificate Authentication
* SSL can also be used as a mechanism for clients to authenticate with the broker instead of the default username and password mechanism. 
* In order for clients to authenticate with SSL, they must present a certificate to the server which is: 
* signed by a trusted CA, and which contains the login username as the Common Name (CN) or Subject Alternative Name (SAN).

* Server Side Changes

rabbitmq-plugins enable rabbitmq_auth_mechanism_ssl
auth_backends.1   = rabbit_auth_backend_internal
auth_mechanisms.1 = PLAIN
auth_mechanisms.2 = EXTERNAL

Authentication Backends configure where the user logins are stored. By default, this is set to rabbit_auth_backend_internal, but there other options available, like LDAP for example (if you want to make use of an existing user store in Active Directory). I added this line explicitly just for completeness.

Authentication Mechanisms configure how user/client authentication should be performed. By default, this is set to PLAIN which is Basic username/password authentication. We need to also add EXTERNAL as an additional mechanism to support SSL authentication. PLAIN must remain as a mechanism if you wish to still have access via the Management UI.

ssl_cert_login_from: common_name

service rabbitmq-server restart
Finally, add a password-less user through the Management UI which will be used for the client authenticating with the broker. Keep note of the username you choose here for the next section.

* Client Side Changes

In order to be able to authenticate with the broker using SSL, the certificate which the client presents on connection must have the CN or SAN set to the username of the password-less user created previously.

https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl



RabbitMQ configuration is notoriously tricky business, the SSL setup doubly so

Tutorial setup
In RabbitMQ set up a user & vhost named "ssltest" and grant the user access.

Verify that you can connect and send messages through the queue.

Through your CA mint a certificate for the server with a CN matching the dns name of the server with the settings for a server specified above.

Through your CA mint a certificate for the client with a CN of "ssltest" with the settings for a client specified above.


If you've done everything correctly, it should work. if it doesnt there are a few things to check:

1 Verify that the certificate files & key files on the server are in PEM format. Open them in notepad and you should see lines that look like "-----BEGIN CERTIFICATE-----" or "-----BEGIN RSA PRIVATE KEY-----"
2 Check that you can establish and openssl connection to the server with the command:

openssl s_client -connect my-server:5671

3 Check that the certificates are properly minted with correct key usage and CN values.
4 Check that the CA is trusted by the client machine


Configuring Client authentication via certificates

* Once basic ssl is configured you can begin configuring client certificate support. Open a rabbitmq command console and enable the ssl authentication plugin with the command:

* rabbitmq-plugins enable rabbitmq_auth_mechanism_ssl

Every certificate used by a client needs a corresponding user in RabbitMQ. There are two options on how rabbitmq can transform certificates into usernames. By default the plugin uses the full DN on the certificate as the username or the CN can be used by setting the ssl_cert_login_from option to common_name.


* In the RabbitMQ administration tool, create a user "CN=ssltest" without a password and grant that user access to the ssltest virtual host. Finally, modify the ssl per the highlighted sections below


% -*- mode: erlang -*-
[
 {rabbit,  [ 
    {ssl_listeners, [5671]},
    {auth_mechanisms, ['EXTERNAL', 'PLAIN']},
    {ssl_options, [{cacertfile,"D:/RabbitMQ/certs/MyCA.pem"},
                  {certfile,"D:/RabbitMQ/certs/MyRabbitServer.pem"},
                  {keyfile,"D:/RabbitMQ/certs/MyRabbitServer.key"},
                  {verify,verify_peer},
                  {ssl_cert_login_from, common_name},
                  {fail_if_no_peer_cert,true}]}	

  ]}
].


https://weblogs.asp.net/jeffreyabecker/Using-SSL-client-certificates-for-authentication-with-RabbitMQ


### Test it
Shovel is running from where we lasted stopped:


Test VM2

Check CN for certificate
pdp-shovel-2 should be it
c:\ssl\openssl-3.0.1\openssl-3\x64\bin>openssl x509 -nout -subject -in c:\testca\server2\server_certificate.pem
subject=CN = pdp-shovel-2
-----BEGIN CERTIFICATE-----


Test VM1
Check CN for certificate
pdp-shovel-1 should be it

c:\ssl\openssl-3.0.1\openssl-3\x64\bin>openssl x509 -nout -subject -in c:\testca_store\client\client_certificate.pem
subject=CN = pdp-shovel-1
-----BEGIN CERTIFICATE-----


VM2
Run as admin rabbitmq command prompt

* Once basic ssl is configured you can begin configuring client certificate support. Open a rabbitmq command console and enable the ssl authentication plugin with the command:

rabbitmq-plugins enable rabbitmq_auth_mechanism_ssl

C:\Program Files\RabbitMQ Server\rabbitmq_server-3.9.12\sbin>rabbitmq-plugins enable rabbitmq_auth_mechanism_ssl
Enabling plugins on node rabbit@pdp-shovel-2:
rabbitmq_auth_mechanism_ssl
The following plugins have been configured:
  rabbitmq_auth_mechanism_ssl
  rabbitmq_management
  rabbitmq_management_agent
  rabbitmq_shovel
  rabbitmq_shovel_management
  rabbitmq_web_dispatch
Applying plugin configuration to rabbit@pdp-shovel-2...
The following plugins have been enabled:
  rabbitmq_auth_mechanism_ssl

started 1 plugins.

2022-03-15 20:28:10.728000+00:00 [info] <0.551.0>  * rabbitmq_auth_mechanism_ssl
2022-03-15 20:28:10.728000+00:00 [info] <0.551.0>  * rabbitmq_shovel_management
2022-03-15 20:28:10.728000+00:00 [info] <0.551.0>  * rabbitmq_shovel
2022-03-15 20:28:10.728000+00:00 [info] <0.551.0>  * rabbitmq_management
2022-03-15 20:28:10.728000+00:00 [info] <0.551.0>  * rabbitmq_web_dispatch
2022-03-15 20:28:10.728000+00:00 [info] <0.551.0>  * rabbitmq_management_agent


Management-> new user without password and access to vhost
CN=pdp-shovel-1

edit config from:

[{rabbit, [
{loopback_users, [<<"guest">>]},
{tcp_listeners, [{"0.0.0.0",5672}]},
{ssl_listeners, [5671]},
{ssl_options, [{cacertfile,"C:\\testca\\bundle\\pdp-shovel-2.ca-bundle"},
		{certfile,"C:\\testca\\server2\\server_certificate.pem"},
                {keyfile,"C:\\testca\\server2\\private_key.pem"},
		{password, "somepassword12"},
		{verify,verify_peer},
                {fail_if_no_peer_cert, true}]},
{ssl_handshake_timeout, 15000}

     
]}
].



to:
[{rabbit, [
{loopback_users, [<<"guest">>]},
{tcp_listeners, [{"0.0.0.0",5672}]},
{ssl_listeners, [5671]},
{auth_mechanisms, ['EXTERNAL', 'PLAIN']},
{ssl_options, [{cacertfile,"C:\\testca\\bundle\\pdp-shovel-2.ca-bundle"},
		{certfile,"C:\\testca\\server2\\server_certificate.pem"},
                {keyfile,"C:\\testca\\server2\\private_key.pem"},
		{password, "somepassword12"},
		{verify,verify_peer},
                 {ssl_cert_login_from, common_name},
                {fail_if_no_peer_cert, true}]},
{ssl_handshake_timeout, 15000}

     
]}
].


VM1
Management-> new user without password and access to vhost
CN=pdp-shovel-1
Edit advanced config in amqps section from:

 {uris, ["amqps://test:test@xx.xx.xx.xx:5671"]},

to:

{uris, ["amqps://CN=pdp-shovel-1@xx.xx.xx.xx:5671"]},


log VM1


log VM2
funny?

2022-03-15 20:47:33.674000+00:00 [info] <0.685.0> started TCP listener on 0.0.0.0:5672
2022-03-15 20:47:33.674000+00:00 [info] <0.685.0> started TCP listener on 0.0.0.0:5672
2022-03-15 20:47:33.674000+00:00 [error] <0.689.0>     supervisor: {<0.689.0>,ranch_listener_sup}
2022-03-15 20:47:33.674000+00:00 [error] <0.689.0>     errorContext: start_error
2022-03-15 20:47:33.674000+00:00 [error] <0.689.0>     reason: badarg
2022-03-15 20:47:33.674000+00:00 [error] <0.689.0>     offender: [{pid,undefined},
2022-03-15 20:47:33.674000+00:00 [error] <0.689.0>                {id,ranch_acceptors_sup},
2022-03-15 20:47:33.674000+00:00 [error] <0.689.0>                {mfargs,
2022-03-15 20:47:33.674000+00:00 [error] <0.689.0>                    {ranch_acceptors_sup,start_link,
2022-03-15 20:47:33.674000+00:00 [error] <0.689.0>                        [{acceptor,{0,0,0,0,0,0,0,0},5671},ranch_ssl,logger]}},

But faild for ssl...

later, sleep now.....or maybe it does not work this way in the shovel.


https://github.com/rabbitmq/rabbitmq-server/issues/732


https://stackoverflow.com/questions/61884733/rabbitmq-tls-authentication


{auth_backends, [rabbit_auth_backend_internal]},

{auth_mechanisms, ['PLAIN', 'AMQPLAIN', 'EXTERNAL']},


same shit, will not start 5671, what is using that?












https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl