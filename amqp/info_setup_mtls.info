https://follow-e-lo.com/2022/01/25/rabbitmq-bidirectional-shovel/

## VM1 + VM2


https://www.rabbitmq.com/install-windows.html


rabbitmq-server-3.9.12.exe
otp_win64_24.2.exe

Install erlang run as admin

Add System var on VM1 and VM2:

ERLANG_HOME
    C:\Program Files\erl-24.2
RABBITMQ_ADVANCED_CONFIG_FILE
    c:\software\advanced.config
RABBITMQ_BASE
    c:\software
RABBITMQ_CONFIG_FILE
    c:\software\rabbitmq.conf

Install rabbitmq run as admin

If RabbitMQ is installed using a non-administrative account, 
a shared secret file used by nodes and CLI tools will not be placed into a correct location, 
leading to authentication failures when rabbitmqctl.bat and other CLI tools are used.

If the Windows service is used, 
the cookie should be copied from C:\Windows\system32\config\systemprofile\.erlang.cookie 
to the expected location for users running commands like rabbitmqctl.bat.

https://www.rabbitmq.com/cli.html#erlang-cookie

Cookie paste from the windir over to the RabbitMQ dir, view content in it

Enable management on VM1 AND VM2
Enable shovel plugins on VM1 only

https://www.rabbitmq.com/access-control.html

Create user with administator access to vhost / and a same user (test:testpassword) on both VM1 and VM2 with admin access:

It is advisable to pre-configure a new user with a generated username and password 
or delete the guest user 
or at least change its password to reasonably secure generated value that won't be known to the public.

## VM1
shovel_get_remote_data queue11

shovel_put_local_data queue22

{uris, ["amqp://test:test@xx.xx.xx.xx"]}, default 5672, will work with empty config on VM2
{uris, ["amqp://test:test@xx.xx.xx.xx:5672"]}, 
{uris, ["amqp://test:test@xx.xx.xx.xx:5671"]}, will work with tcp_listner config on VM2

Outbound must be allowed on 5672
* Outbound must be allowed on 5671
TNC 5672 will work from VM1 if RMQ running on VM2 and RMQ has at least default config
TNC 5671 will work from VM1 if RMQ running on VM2 and RMQ has at tcp_listeners 5671 (5672)

## VM2
queue11
queue22

Queues can be created programatically or in the management
Inbound must be allowed on 5672

Enable 5671
vm2 advanced config from 
[].
to
* Inbound must be allowed on 5671, TNC and shovel with amqp will work, shall work

[{rabbit, [
{loopback_users, []},
{tcp_listeners, [{"0.0.0.0",5672}, {"0.0.0.0",5671}]} 
]}
].


## SSL VM2

https://www.rabbitmq.com/ssl.html

listeners.ssl	                    A list of ports to listen on for TLS connections. RabbitMQ can listen on a single interface or multiple ones.
ssl_options.cacertfile	            Certificate Authority (CA) bundle file path
ssl_options.certfile	            Server certificate file path
ssl_options.keyfile	                Server private key file path
ssl_options.verify	                Should peer verification be enabled?
ssl_options.fail_if_no_peer_cert	When set to true, TLS connection will be rejected if client fails to provide a certificate


SSL and Client Certificate Authentication in RabbitMQ with .NET Standard 2.1
https://cjshelton.github.io/blog/2019/12/18/rabbitmq-client-certificate-authentication.html

Getting RabbitMQ to work over SSL can be tricky, and it is not helped by a confusion of terminology. SSL, 
Peer Verification and Certificate Authentication are very similar, but play a different role in the configuration of SSL in RabbitMQ.

* SSL and TLS are both cryptographic protocols used to secure data transmitted between a client and server, with TLS being the newer protocol which superseded SSL a while ago

* Peer Verification builds on top of SSL, and is a way for RabbitMQ to verify that the clients which are attempting to connect can be trusted, that is 
  — they present a certificate which is signed by a CA which the server also trusts.
   This helps ensure that only trusted clients can connect to the broker and helps prevent against Man-in-the-Middle attacks.
   If the client is not able to supply a trusted certificate, then the server will reject the connection. 
   The exception to this is if the fail_if_no_peer_cert configuration option is set to verify_none, in which case, the server will allow the connection.
   Peer Verification is not required in order to use SSL, but it is highly recommended, at least in production environments.

* Client Certificate Authentication
  SSL can also be used as a mechanism for clients to authenticate with the broker instead of the default username and password mechanism. 
  In order for clients to authenticate with SSL, they must present a certificate to the server which is signed by a trusted CA, 
  and which contains the login username as the Common Name (CN) or Subject Alternative Name (SAN). More details on how to configure this later.


* Enabling SSL
  Creating the Certificates
   https://www.rabbitmq.com/ssl.html#manual-certificate-generation

   highlight a few things which didn’t seem obvious:
   * The step to generate a client certificate is only required if you want to use Peer Verification. It is also required if you plan on using certificates for client authentication.
   * The CA file, which is used to self-sign the certificates, needs to be in the .pem format for RabbitMQ.
   * The CN or SAN of the server certificate must be set to the name of the host machine on which the broker will be running. The documentation states to use $(hostname), 
    but this should only be used if the machine you are generating the certificate is the same machine on which the broker will be running on.
   * The CN of the client certificate can be set to any arbitrary value, unless you are using the certificate for client authentication (explained later).
   * The passwords used to protect the server and client private keys can, and should, be different.
   * Although it is common to do it this way, the server and client certificates do not have to be signed by the same CA. 
    They can be different, as long as they are both trusted by the server and the client.



At this point, you should have the following files available:

A CA file in the .pem format.
A certificate/key pair for the server in the .pem format, signed by the CA, whose CN or SAN value is set to the hostname of the machine RabbitMQ will be running on.
A certificate/key pair for each client, signed by the CA. The format depends on the client-specific implementation.

################### 1 Shovel with self signed VM2 Server 
################### 2 From amqp to amqps server certificate and ca certificate

VM2 is running, VM2 advanced just tcp_listeners:

[{rabbit, [
{loopback_users, []},
{tcp_listeners, [{"0.0.0.0",5672}, {"0.0.0.0",5671}]}

     
]}
].

2022-02-07 17:08:25.578000+00:00 [info] <0.689.0> started TCP listener on 0.0.0.0:5672
2022-02-07 17:08:25.578000+00:00 [info] <0.707.0> started TCP listener on 0.0.0.0:5671
:5672 Shovel shovel_put_local_data): user 'test' authenticated and granted access to vhost '/'
:5671 Shovel shovel_get_remote_data): user 'test' authenticated and granted access to vhost '/'

## Make cert

https://www.openssl.org/


Binaries
https://wiki.openssl.org/index.php/Binaries

OpenSSL for Windows
Pre-compiled 64-bit (x64) and 32-bit (x86) 1.1.1 and 3.0 executables and libraries for Microsoft Windows Operating Systems with a dependency on the Microsoft Visual Studio 2015-2019 runtime and Microsoft Visual Studio 2015-2022 runtime respectively. 
The distribution may be used standalone or integrated into any Windows application. The distribution's EXE and DLL files are digitally signed 'FireDaemon Technologies Limited'.

https://kb.firedaemon.com/support/solutions/articles/4000121705

1 Download ZIP File (Preferred)
3 Installation
Install the appropriate Visual Studio C++ Runtime found in the "prerequisites" folder in the "openssl-1.1" or "openssl-3 folder"


mkdir testca
cd testca
mkdir certs private

echo 01 > serial
create a new file index.txt (empty, is the db file)

Now add the following OpenSSL configuration file, openssl.cnf, within the newly created testca directory:

Directory of c:\testca

02/07/2022  05:13 PM    <DIR>          .
02/07/2022  05:13 PM    <DIR>          ..
02/07/2022  05:12 PM    <DIR>          certs
02/07/2022  05:13 PM                 0 index.txt
02/07/2022  05:11 PM             1,302 openssl.cnf
02/07/2022  05:12 PM    <DIR>          private
02/07/2022  05:13 PM                 5 serial
02/07/2022  05:12 PM    <DIR>          server



Edit openssl.cnf with win path “\\” and set hostname, view the file openssl.cnf

set OPENSSL_CONF=C:\testca\openssl.cnf
echo %OPENSSL_CONF%


openssl req -x509 -config C:\testca\openssl.cnf -newkey rsa:2048 -days 365 -out C:\testca\ca_certificate.pem -outform PEM -subj /CN=MyTestCA/ -nodes
openssl x509 -in C:\testca\ca_certificate.pem -out C:\testca\ca_certificate.cer -outform DER

C:\testca now has extra:
ca_certificate.pem
ca_certificate.cer


C:\testca\privat:
ca_private_key.pem


The process for creating server and client certificates is very similar. First the server

mkdir c:\testca\server

openssl genrsa -out c:\testca\server\private_key.pem 2048
openssl req -new -key c:\testca\server\private_key.pem -out c:\testca\server\req.pem -outform PEM -subj /CN=pdp-shovel-2/O=server/ -nodes
# NOTE ABOUT CN:
# check CN openssl x509 -noout -subject -in c:\testca\server\server_certificate.pem
# = subject=CN = pdp-shovel-2, O = server
# Change CN, make new for just CN, it does matter even if you use ip, view section ## Test 5. But CN should be hostname or FQDN
openssl req -new -key c:\testca\server2\private_key.pem -out c:\testca\server2\req.pem -outform PEM -subj /CN=pdp-shovel-2 -nodes

* Both (or all CN) works when only the server has certificates, after you have verified the vm2 build with self signed toward VM1 with no SSL config.
* Then you can set up: ################### Shovel VM1 with self signed VM2 Server, VM1 Client (with ssl options) will enforce VM2 server CA certificate after test 5

* That means VM2 has SSL in advanced config and VM1 only has amqps shovel in advanced config, not SSL


openssl ca -config c:\testca\openssl.cnf -in c:\testca\server\req.pem -out c:\testca\server\server_certificate.pem -notext -batch -extensions server_ca_extensions

## output from cmd
Using configuration from c:\testca\openssl.cnf
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
commonName            :ASN.1 12:'pdp-shovel-2'
organizationName      :ASN.1 12:'server'
Certificate is to be certified until Feb  7 17:23:32 2023 GMT (365 days)

Write out database with 1 new entries
Data Base Updated
## output from cmd

openssl pkcs12 -export -out c:\testca\server\server_certificate.p12 -in c:\testca\server\server_certificate.pem -inkey c:\testca\server\private_key.pem -passout pass:somepassword12

 Directory of c:\testca\server

02/07/2022  05:23 PM    <DIR>          .
02/07/2022  05:23 PM    <DIR>          ..
02/07/2022  05:22 PM             1,732 private_key.pem
02/07/2022  05:23 PM               936 req.pem
02/07/2022  05:23 PM             2,563 server_certificate.p12
02/07/2022  05:23 PM             1,170 server_certificate.pem
02/07/2022  05:12 PM                14 somepassword12.txt, we made this to store tha password

Now check cert
ca_certificate.cer issued to MyTestCa, CN = MyTestCA

VM2 advanced

[{rabbit, [
{loopback_users, [<<"guest">>]},
{tcp_listeners, [{"0.0.0.0",5672}, {"0.0.0.0",5671}]},
{ssl_listeners, [5671]},
{ssl_options, [{cacertfile,"C:\\testca\\ca_certificate.pem"},
		{certfile,"C:\\testca\\server\\server_certificate.pem"},
                {keyfile,"C:\\testca\\server\\private_key.pem"},
		{password, "somepassword12"},
                {verify,verify_peer},
                {fail_if_no_peer_cert, false}]}

     
]}
].


2022-02-07 17:32:52.289000+00:00 [info] <0.683.0> started TCP listener on 0.0.0.0:5672
2022-02-07 17:32:52.289000+00:00 [info] <0.701.0> started TCP listener on 0.0.0.0:5671
2022-02-07 17:32:52.289000+00:00 [info] <0.721.0> started TLS (SSL) listener on [::]:5671

VM1 change from amqp to amqps in advanced config for shovel:

{uris, ["amqp://test:test@xx.xx.xx.xx:5671"]},

{uris, ["amqps://test:test@xx.xx.xx.xx:5671"]},


2022-02-07 17:36:42.288000+00:00 [warning] <0.812.0> Connection (<0.812.0>): certificate chain verification is not enabled for this TLS connection. Please see https://rabbitmq.com/ssl.html for more information.
2022-02-07 17:36:42.288000+00:00 [warning] <0.815.0> Description: "Authenticity is not established by certificate path validation"
2022-02-07 17:36:42.288000+00:00 [warning] <0.815.0>      Reason: "Option {verify, verify_peer} and cacertfile/cacerts is missing"
Shovel 'shovel_get_remote_data' failed to connect (URI: amqps://xx.xx.xx.xx:5671): closed


VM2 edit config from:

[{rabbit, [
{loopback_users, [<<"guest">>]},
{tcp_listeners, [{"0.0.0.0",5672}, {"0.0.0.0",5671}]},
{ssl_listeners, [5671]},
{ssl_options, [{cacertfile,"C:\\testca\\ca_certificate.pem"},
		{certfile,"C:\\testca\\server\\server_certificate.pem"},
                {keyfile,"C:\\testca\\server\\private_key.pem"},
		{password, "somepassword12"},
		{verify,verify_peer},
                {fail_if_no_peer_cert, false}]}

 ]}
].    


To this, removed tcp_listner 5671

[{rabbit, [
{loopback_users, [<<"guest">>]},
{tcp_listeners, [{"0.0.0.0",5672}]},
{ssl_listeners, [5671]},
{ssl_options, [{cacertfile,"C:\\testca\\ca_certificate.pem"},
		{certfile,"C:\\testca\\server\\server_certificate.pem"},
                {keyfile,"C:\\testca\\server\\private_key.pem"},
		{password, "somepassword12"},
		{verify,verify_peer},
                {fail_if_no_peer_cert, false}]}

     
]}
].



VM1
Is now connected with ssl, how about that, restart service on VM1 and view logs:

2022-02-07 17:55:55.337000+00:00 [info] <0.505.0> Ready to start client connection listeners
2022-02-07 17:55:55.337000+00:00 [warning] <0.641.0> Connection (<0.641.0>): certificate chain verification is not enabled for this TLS connection. Please see https://rabbitmq.com/ssl.html for more information.
2022-02-07 17:55:55.337000+00:00 [info] <0.663.0> started TCP listener on [::]:5672
2022-02-07 17:55:55.337000+00:00 [info] <0.681.0> started TCP listener on 0.0.0.0:5672
2022-02-07 17:55:55.353000+00:00 [warning] <0.645.0> Description: "Authenticity is not established by certificate path validation"
2022-02-07 17:55:55.353000+00:00 [warning] <0.645.0>      Reason: "Option {verify, verify_peer} and cacertfile/cacerts is missing"
2022-02-07 17:55:55.353000+00:00 [warning] <0.645.0> 
2022-02-07 17:55:55.540000+00:00 [info] <0.505.0> Server startup complete; 5 plugins started.
2022-02-07 17:55:55.540000+00:00 [info] <0.505.0>  * rabbitmq_shovel_management
2022-02-07 17:55:55.540000+00:00 [info] <0.505.0>  * rabbitmq_shovel
2022-02-07 17:55:55.540000+00:00 [info] <0.505.0>  * rabbitmq_management
2022-02-07 17:55:55.540000+00:00 [info] <0.505.0>  * rabbitmq_web_dispatch
2022-02-07 17:55:55.540000+00:00 [info] <0.505.0>  * rabbitmq_management_agent

No more rolling warnings log, just the 3 warnings 1 time and shovel is running, view image success.jpg


VM2
restart service on VM2 and view logs:


2022-02-07 17:59:33.711000+00:00 [info] <0.679.0> started TCP listener on 0.0.0.0:5672
2022-02-07 17:59:33.711000+00:00 [info] <0.699.0> started TLS (SSL) listener on [::]:5671
2022-02-07 17:59:33.711000+00:00 [info] <0.719.0> started TLS (SSL) listener on 0.0.0.0:5671
2022-02-07 17:59:33.930000+00:00 [info] <0.546.0> Server startup complete; 5 plugins started.
2022-02-07 17:59:33.930000+00:00 [info] <0.546.0>  * rabbitmq_shovel_management
2022-02-07 17:59:33.930000+00:00 [info] <0.546.0>  * rabbitmq_shovel
2022-02-07 17:59:33.930000+00:00 [info] <0.546.0>  * rabbitmq_management
2022-02-07 17:59:33.930000+00:00 [info] <0.546.0>  * rabbitmq_web_dispatch
2022-02-07 17:59:33.930000+00:00 [info] <0.546.0>  * rabbitmq_management_agent

[...]

5672 - Shovel shovel_put_local_data): user 'test' authenticated and granted access to vhost '/'
5671 - Shovel shovel_get_remote_data): user 'test' authenticated and granted access to vhost '/'


No more rolling warnings log, just the 3 warnings 1 time and shovel is running, view image success.jpg

################### Shovel with self signed VM2 Server 
################### 2 From amqp to amqps server certificate and ca certificate


################### Shovel VM1 with self signed VM2 Server, VM1 Client (with ssl options) will enforce VM2 server CA certificate after test 5 INFO


The below were for testing, test server certificate 1,2,3,4,5, the bottom line was to:

View tls_success_1.jpg

1 Copy the ca_certificate.pem from VM2 to VM1:
2 VM1, append to the shovel config:

{amqp_client, [
    {ssl_options, [{cacertfile,"C:\\testca\\ca_certificate.pem"},
	{server_name_indication,disable},
    {verify,verify_peer},
    {fail_if_no_peer_cert,true}]}
	]},
 {rabbitmq_shovel,

Management Listening ports are: Connector will send data internal over 5672, and shovel will send over 5671 amqps to VM2
amqp 0.0.0.0 5672 
amqp :: 5672 

3 VM2 advanced config was unchanged, cn is hostname, or not hostname does not matter in the server_certificate. (That is why path3)


[{rabbit, [
{loopback_users, [<<"guest">>]},
{tcp_listeners, [{"0.0.0.0",5672}]},
{ssl_listeners, [5671]},
{ssl_options, [{cacertfile,"C:\\testca\\ca_certificate.pem"},
		{certfile,"C:\\testca\\server3\\server_certificate.pem"},
                {keyfile,"C:\\testca\\server3\\private_key.pem"},
		{password, "somepassword12"},
		{verify,verify_peer},
                {fail_if_no_peer_cert, false}]}

     
]}
].

Management Listening ports are:
amqp/ssl 0.0.0.0 5671 
amqp/ssl :: 5671 

###################### success
###################### success
###################### success


Aftr success in test_server.info Test 5 we did:

LETS FAKE A BAD CA Certificate:
Just make a file with no content on VM1:
bad_ca_certificate.pem

Edit VM1 and restart

{amqp_client, [
    {ssl_options, [{cacertfile,"C:\\testca\\bad_ca_certificate.pem"},
	{server_name_indication,disable},
    {verify,verify_peer},
    {fail_if_no_peer_cert,true}]}
	]},
  {rabbitmq_shovel,


log
2022-02-10 11:49:44.311000+00:00 [notice] <0.820.0> TLS client: In state wait_cert at ssl_handshake.erl:2015 generated CLIENT ALERT: Fatal - Unknown CA

now edit back
{ssl_options, [{cacertfile,"C:\\testca\\ca_certificate.pem"},

log
2022-02-10 11:51:13.735000+00:00 [warning] <0.625.0> Connection (<0.625.0>): certificate chain verification is not enabled for this TLS connection. Please see https://rabbitmq.com/ssl.html for more information.
2022-02-10 11:51:13.735000+00:00 [warning] <0.625.0> Connection (<0.625.0>): certificate chain verification is not enabled for this TLS connection. Please see https://rabbitmq.com/ssl.html for more information.
2022-02-10 11:51:13.923000+00:00 [info] <0.505.0> Server startup complete; 5 plugins started.
2022-02-10 11:51:13.923000+00:00 [info] <0.505.0>  * rabbitmq_shovel_management
2022-02-10 11:51:13.923000+00:00 [info] <0.505.0>  * rabbitmq_shovel
2022-02-10 11:51:13.923000+00:00 [info] <0.505.0>  * rabbitmq_management
2022-02-10 11:51:13.923000+00:00 [info] <0.505.0>  * rabbitmq_web_dispatch



NOTE !!!

https://pcable.net/posts/2021-02-10-rmq-ldap/

Turns out, later versions of Erlang require SNI information on connections, which is fine - except if that certificate is a wildcard certificate. 
The folks who work on Erlang made a decision to not validate wildcard certificates unless you specifically allow it

(hm. we have rabbitmq-server-3.9.12.exe.)
On RabbitMQ 3.8.11 and earlier, you could just turn SNI off - toss 
{server_name_indication,disable} into the ssl_options block and move on.
I don’t love this, but it could be OK depending on your threat model and how your LDAP servers are load balanced1.


#### To be continued
rabbitmq_auth_backend_ldap.ssl_hostname_verification

https://www.rabbitmq.com/ldap.html

rabbitmq-plugins enable rabbitmq_auth_backend_ldap

#### To be continued

NOTE: 
1 So it verifies correct ca_certificate for the sertificate that the server uses (tested with bad_ca_certificate.pem)
2 and it demands that the server must have a certificate that is signed bu the trusted CA.
3 but it does not look for CN=HOSTNAME or IP (which we generated 2 times, one with hostname and 1 with ip and checked it in openssl)
4 we bypass SNI, server name indication
5 (and the client VM1 is not using a certificate)
So this is:

https://www.cloudflare.com/learning/access-management/what-is-mutual-tls/

TLS, the server has a TLS certificate and a public/private key pair, while the client does not. The typical TLS process works like this:
1 Client connects to server
2 Server presents its TLS certificate
3 Client verifies the server's certificate
4 Client and server exchange information over encrypted TLS connection

In mTLS, however, both the client and server have a certificate, and both sides authenticate using their public/private key pair.

#### Enocode / Decode password

View 3_test_enoode_decode.info = Encrypted string in ssl password....hm..Classic config file format allows for config value encryption, which is recommended for passwords.

#### Enocode / Decode password

################### Shovel VM1 with self signed VM2 Server, VM1 Client with self signed will enforce VM2 server CA certificate after test

Info:
https://www.rabbitmq.com/uri-spec.html

* The "amqps" URI scheme is used to instruct a client to make an secured connection to the server.

https://www.rabbitmq.com/uri-query-parameters.html

* TLS options can also be specified globally using the amqp_client.ssl_options configuration key in the rabbitmq.config or advanced.config file.
* They will be merged with the TLS parameters from the URI (the latter will take precedence) 
  and affect all outgoing RabbitMQ Erlang client connections on the node, including plugins that use the client internally (Federation, Shovel, etc).
* If the RabbitMQ node is not using SSL, the src-uri or dest-uri should start with amqp://. If SSL is being used, the src-uri or dest-uri should start with amqps://.

https://www.rabbitmq.com/shovel.html

* Securing Shovel Connections with TLS
* Shovel connections can use TLS. Because Shovel uses client libraries under the hood, 
  it is necessary to both configure the source broker to listen for TLS connections and the Shovel to use TLS when connecting.

To configure Shovel to use TLS, one needs to

* Specify CA certificate and client certificate/key pair, as well as other parameters (e.g. peer verification depth) via URI query parameters
* Configure Erlang client to use TLS
* Just like with "regular" client connections, server's CA should be trusted on the node where Shovel runs, and vice versa. 
  The same TLS troubleshooting methodology that is recommended for application connections applies to shovels.


Done:
3_test_client.info URI is not working, it seems that the global ssl options has presedence over URI.
Done.

From View tls_success_1.jpg, we faked a bad_ca_certificate and the client did not connect, good. That means the server had a different ca_certificate then what we trusted.
Now lets face a bad server sertificate before we go to mTLS.
From tls_success_2_bad_server_cert.jpg we see that now we trust the CA on both ends and we still connect even if the bad_server_certificate.pem is not signed by the CA.
That means the trust on only on CA level.

Lets go a step further:

{server_name_indication, "my.rmq-server.net"}],

SNI, try to find out what it is presenting (server, client) and add that string
https://www.rabbitmq.com/ssl.html
server_name_indication - set this option to the host name of the server to which a TLS connection will be made to enable "Server Name Indication" 
verification of the certificate presented by the server. This ensures that the server certificate's CN= value will be verified during TLS connection establishment. 

You can override this behavior by setting server_name_indication to a different host name or to the special value disable to disable this verification.
{server_name_indication, "my.rmq-server.net"}],

VM2 can we just use SNI?
cmd ipconfig
ping -a IP add

Pinging pdp-shovel-2.reddog.microsoft.com

{server_name_indication,disable}, = success
{server_name_indication,"pdp-shovel-2.reddog.microsoft.com"}, = 2022-02-18 11:43:24.667000+00:00 [notice] <0.969.0>  - {bad_cert,hostname_check_failed}
{server_name_indication,"pdp-shovel-2"}, = 2022-02-18 11:46:32.628000+00:00 [notice] <0.773.0>  - {bad_cert,hostname_check_failed}
{server_name_indication,"xx.xx.xx.xx"}, = 2022-02-18 11:47:49.641000+00:00 [notice] <0.888.0>  - {bad_cert,hostname_check_failed}

Nope, all failed.....

https://support.comodo.com/index.php?/Knowledgebase/Article/View/1145/1/how-do-i-make-my-own-bundle-file-from-crt-files


Lets step back, remove the shovel2 URI and go back to server has cert and client trusts the server ca certificate.

1 Make bundle of client_ca_certificate VM1 and ca_certificate VM2 for server bundle.crt view 4_make_bundle.info
2 Use bundle on both machines VM1, VM2 = success view image tls_bundle.jpg
3 Add client certificate section to client, VM1 = success, view 5_mTLS.info
4 Change config on VM2 to verify_peer, true on {verify,verify_none},{fail_if_no_peer_cert, false}]} = 5_mTLS.info

SUCCESS..... view tls_mTLS_success.jpg

3 Keep orginal shovel setup on VM1 = yes
4 If it works, test with bad_client_server_certificate.pem view test_7_mTLS_SNI disable reason.
It works even with bad_client_certificatesame as with bad_server_certificate since we trust the CA.....

################### Shovel VM1 with self signed VM2 Server, VM1 Client with self signed will enforce VM2 server CA certificate after test



TODO SNI
If we remove on VM1: test_8_SNI

VM1
{server_name_indication, disable},

LOG

2022-02-19 12:12:15.559000+00:00 [notice] <0.805.0> TLS client: In state wait_cert at ssl_handshake.erl:2017 generated CLIENT ALERT: Fatal - Handshake Failure
2022-02-19 12:12:15.559000+00:00 [notice] <0.805.0>  - {bad_cert,hostname_check_failed}
2022-02-19 12:12:15.559000+00:00 [error] <0.777.0> Shovel 'shovel_put_local_data' failed to connect (URI: amqps://XX.XX.XX.XX:5671): {tls_alert,{handshake_failure,"TLS client: In state wait_cert at ssl_handshake.erl:2017 generated CLIENT ALERT: Fatal - Handshake Failure\n {bad_cert,hostname_check_failed}"}}

VM2 LOG

2022-02-19 12:13:20.827000+00:00 [notice] <0.4004.0> TLS server: In state wait_cert received CLIENT ALERT: Fatal - Handshake Failure


Must read on SNI, this is only due to certificate check for client....








