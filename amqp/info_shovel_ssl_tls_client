
Shovel Plugin
https://www.rabbitmq.com/shovel.html

* A shovel behaves like a well-written client application, which connects to its source and destination, 
* consumes and republishes messages, 
* and uses acknowledgements on both ends to cope with failures.
* rabbitmq-plugins enable rabbitmq_shovel
* rabbitmq-plugins enable rabbitmq_shovel_management

Authentication and authorisation for Shovels
* Shovel connection must successfully authenticate and be authorized to access the virtual host and resources it is trying to use. 
* This is true for both sources and destinations.

Securing Shovel Connections with TLS
* To configure Shovel to use TLS, one needs to:
* Specify CA certificate and client certificate/key pair, as well as other parameters (e.g. peer verification depth) via URI query parameters
* Configure Erlang client to use TLS
* Just like with "regular" client connections:
* Server's CA should be trusted on the node where Shovel runs, and vice versa. 
* The same TLS troubleshooting methodology that is recommended for application connections applies to shovels.

URI Query Parameters 
https://www.rabbitmq.com/uri-query-parameters.html

TLS options can also be specified globally using the amqp_client.ssl_options configuration key in the rabbitmq.config or advanced.config file in this manner:
* {amqp_client, [
    {ssl_options, [


https://github.com/rabbitmq/rabbitmq-website/issues/42

Shovel uses RabbitMQ Erlang client under the hood. So you need to configure
amqp_client.ssl_options much like you do with rabbit.ssl_options.
amqp_client and rabbit should be siblings (not nested of one into the other)
in the config file.
Then just don’t forget to set `verify` to `verify_peer` ;) 


https://www.rabbitmq.com/ssl.html#peer-verification-depth

Certificate Chains and Verification Depth
* When using a client certificate signed by an intermediate CA, it may be necessary to configure RabbitMQ server to use a higher verification depth.
* The depth is the maximum number of non-self-issued intermediate certificates that may follow the peer certificate in a valid certification path. 
* So if depth is 0 the peer (e.g. client) certificate must be signed by the trusted CA directly, 
* if 1 the path can be "peer, CA, trusted CA", if it is 2 "peer, CA, CA, trusted CA", and so on. The default depth is 1.

RabbitMQ server:
*  {depth, 0}, should fail with bad cert, this is the strongest.
*  Since not specified, it is default 1
*  {depth, 2}, should also work


SSL and Client Certificate Authentication in RabbitMQ
https://cjshelton.github.io/blog/2019/12/18/rabbitmq-client-certificate-authentication.html

# SSL/TLS
* SSL is enabled on RabbitMQ by setting the desired port and pointing it to a pair of public and private key files, 
  and a CA file which signed the certificate/key pair. 
* For a trusted connection to be established, the client applications will need to trust the same CA.

# Peer Verification
* Peer Verification builds on top of SSL, and is a way for RabbitMQ to verify that the clients which are attempting to connect can be trusted, 
  that is — they present a certificate which is signed by a CA which the server also trusts. 
* This helps ensure that only trusted clients can connect to the broker and helps prevent against Man-in-the-Middle attacks.
* If the client is not able to supply a trusted certificate, then the server will reject the connection. 
* The exception to this is if the: fail_if_no_peer_cert configuration option is set to verify_none, in which case, the server will allow the connection.

* Client Certificate Authentication
* SSL can also be used as a mechanism for clients to authenticate with the broker instead of the default username and password mechanism. 
* In order for clients to authenticate with SSL, they must present a certificate to the server which is: 
* signed by a trusted CA, and which contains the login username as the Common Name (CN) or Subject Alternative Name (SAN).





https://github.com/rabbitmq/rabbitmq-server/issues/2983
The plugin that makes it possible to login with the certificates is
rabbitmq-auth-mechanism-ssl.
